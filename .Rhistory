conjuntoDeBasesEnUno<- rbind(grandes_chile, grandes_colombia, grandes_peru, medianas_chile, medianas_colombia, medianas_peru, micro_chile, micro_colombia, micro_peru, pequena_chile, pequena_colombia, pequena_peru)
tipologiaDeBase <- function(conjuntoDeBasesEnUno){
for (tipologia in 1:length(conjuntoDeBasesEnUno)) {
#### Se guarda la variable typeof para que de la respuesta correpondiente.
tipoDeDato <- typeof(conjuntoDeBasesEnUno[tipologia])
print(paste("La variable que se encuentra en la data de tipología",tipologia,"es de tipo de dato:",tipoDeDato))
}
}
### Respuesta: se prueba oficialmente.
tipologiaDeBase(conjuntoDeBasesEnUno)
### Se crea una función que mantenga el recorrido de la base de datos que es un vector.
obsTotales <- function(conjuntoDeBasesEnUno){
### Se establece la regla de ceros para que cambie los elementos.
contadorDePeru <- 0
contadorDeChile <- 0
for (obs in 1:(length(conjuntoDeBasesEnUno[["pais"]]))){
### Condición.
if((conjuntoDeBasesEnUno)[["pais"]][obs] == "peru"){
contadorDePeru <- contadorDePeru + 1
### Condición.
}else if((conjuntoDeBasesEnUno)[["pais"]][obs] == "chile"){
contadorDeChile <- contadorDeChile + 1
}
}
print(paste("Peru tiene:", contadorDePeru,"observaciones. Versus Chile que tiene:", contadorDeChile,"observaciones."))
}
### Respuesta: se prueba oficialmente.
obsTotales(conjuntoDeBasesEnUno)
### Se cambia la data a números.
conjuntoDeBasesEnUno[["ingresos"]] <- as.numeric(conjuntoDeBasesEnUno[["ingresos"]])
### Se crea una función que mantenga el recorrido de la base de datos que es un vector.
paisMaxIngreso <- function(conjuntoDeBasesEnUno){
### Se establece la regla de ceros para que cambie los elementos.
cPe <- 0
cCh <- 0
cCo <- 0
for (valores in 1:nrow(conjuntoDeBasesEnUno)){
### Se diseñan las condiciones igual que el ejercicio anterior. Se guardan los valores de la columna de los ingresos diferenciando el país. Con esto se busca diferenciar la posición del país e ingreso.
if(conjuntoDeBasesEnUno[valores,2] == "peru"){
### Se agrega la regla de agregar el contador de la columna 3, es decir el de ingresos.
cPe <- cPe + conjuntoDeBasesEnUno[valores,3]
}else if(conjuntoDeBasesEnUno[valores,2] == "chile"){
cCh <- cCh + conjuntoDeBasesEnUno[valores,3]
}else if(conjuntoDeBasesEnUno[valores,2] == "colombia"){
cCo <- cCo + conjuntoDeBasesEnUno[valores,3]
}
}
### Se crea vector para determinar el orden como posición específicamente respecto a los países.
n <- c(cPe,cCh,cCo)
### Se crea una función LOOP la cual guarda el vector de países.
ox <- function(n){
#### Se agrega una fórmula de prueba para que reconozca la lógica.
m <- ((n[1]+n[2]+n[3]) / length(n))
### Se establece el for para que recorra el vector y se pueda orden con el LOOP sin tener un orden especifico el país pero si el ingreso de aquel.
for (a in 1:length(n)) {
for (b in 1:(length(n)-1)) {
if(n[b] > n[b+1]){
tmp <- n[b]
n[b] <- n[b+1]
n[b+1] <- tmp
}
}
}
}
### Se crea un vector que calcula el máximo del vector anteriormente creado de los países.
maximo <- max(n)
#### Se diseñan las condiciones para que se designe el país correspondiente en el cálculo del LOOP y el vector respecto a el ingreso.
if( cPe == maximo){
pm <- "Peru"
}else if(cCh == maximo){
pm <- "Chile"
}else if(cCo == maximo){
pm <- "Colombia"
}
print(paste("Conclusión:", pm,"es el país con mayor ingresos de explotación de la muestra con:", n[3]))
}
## Respuesta: se prueba oficialmente.
paisMaxIngreso(conjuntoDeBasesEnUno)
### Se cambia la data a números.
conjuntoDeBasesEnUno[["tasa_interes"]] <- as.numeric(conjuntoDeBasesEnUno[["tasa_interes"]])
### Se crea un vector que almacene los cálculos y datos de la nueva columna
nt <- c()
### Se crea un for que recorra la columna.
for (vti in 1:nrow(conjuntoDeBasesEnUno)) {
### Diseño condición: se designa la posición de la columna que identifica el país.
if(conjuntoDeBasesEnUno[vti,"pais"] == "peru"){
### Se guarda el cálculo de la variable con el vector.
nt <- c(nt, conjuntoDeBasesEnUno[[vti,"tasa_interes"]]+0.3)
}else if(conjuntoDeBasesEnUno[vti,"pais"] == "chile"){
nt <- c(nt, conjuntoDeBasesEnUno[[vti,"tasa_interes"]]*0.1)
}else if(conjuntoDeBasesEnUno[vti,"pais"] == "colombia"){
nt <- c(nt, conjuntoDeBasesEnUno[[vti,"tasa_interes"]]/10)
}
}
## Respuesta: se prueba oficialmente.
#### Se crea el reconocimiento del vector con la tabla.
conjuntoDeBasesEnUno <- cbind(conjuntoDeBasesEnUno, nt = nt)
### Se cambia la data a números.
conjuntoDeBasesEnUno[["exportaciones"]] <- as.numeric(conjuntoDeBasesEnUno[["exportaciones"]])
### Se le señalan a los datos del data que debe redondear a la unidad.
conjuntoDeBasesEnUno[["exportaciones"]] <- round(conjuntoDeBasesEnUno[["exportaciones"]],1)
#### Se establecen las variables que reemplazaran el redondeo de datos.
a <- 1
b <- 2
c <- 3
### Se crea un for que recorra la columna del data.
for (condicion in 1:(length(conjuntoDeBasesEnUno[["exportaciones"]]))) {
### Se establece la condición de la data.
if(conjuntoDeBasesEnUno[["exportaciones"]][condicion] == 2.1){
### se guarda la variable que reemplaza en la condición.
conjuntoDeBasesEnUno[["exportaciones"]][condicion] <- c
}else if(conjuntoDeBasesEnUno[["exportaciones"]][condicion] < 2.1){
conjuntoDeBasesEnUno[["exportaciones"]][condicion] <- b
}else if(conjuntoDeBasesEnUno[["exportaciones"]][condicion] > 2.1){
conjuntoDeBasesEnUno[["exportaciones"]][condicion] <- a
}
}
### Se cambia la data a números.
conjuntoDeBasesEnUno[["endeudamiento"]] <- as.numeric(conjuntoDeBasesEnUno[["endeudamiento"]])
### Se definen las variables nuevas del LOOP.
ePe <- 0
eCh <- 0
eCo <- 0
### Se crea un for que recorra la columna de endeudamiento.
for (en in 1:nrow(conjuntoDeBasesEnUno)){
#### Diseño condición del país en su posición como país.
if(conjuntoDeBasesEnUno[en,2] == "peru"){
#### Almacenamiento de la variable en la posición endeudamiento.
ePe <- ePe + conjuntoDeBasesEnUno[en,8]
}else if(conjuntoDeBasesEnUno[en,2] == "chile"){
eCh <- eCh + conjuntoDeBasesEnUno[en,8]
}else if(conjuntoDeBasesEnUno[en,2] == "colombia"){
eCo <- eCo + conjuntoDeBasesEnUno[en,8]
}
}
#### Se crean 2 vectores que almacenen las variables anteriormente definidas.
endeudamiento <- c(ePe, eCh, eCo)
pais <- c("peru","chile","colombia")
#### Se construye el vector que diseña el grafico.
barplot(names.arg = pais, height = endeudamiento, main = "Nivel de endeudamiento de algunos paises latinoamericanos", sub = "Paises: Peru, Chile y Colombia", xlab = "Pais", ylab = "Nivel de endeudamiento")
install.packages("csv")
library("csv")
pequena_peru <- read.csv(file = "pequena_peru.csv", sep = ";")
micro_peru <- read.csv(file = "micro_peru.csv", sep = ";")
medianas_peru <- read.csv(file = "medianas_peru.csv", sep = ";")
grandes_peru <- read.csv(file = "grandes_peru.csv", sep = ";")
pequena_colombia <- read.csv(file = "pequena_colombia.csv", sep = ";")
micro_colombia <- read.csv(file = "micro_colombia.csv", sep = ";")
medianas_colombia <- read.csv(file = "medianas_colombia.csv", sep = ";")
grandes_colombia <- read.csv(file = "grandes_colombia.csv", sep = ";")
pequena_chile <- read.csv(file = "pequena_chile.csv", sep = ";")
micro_chile <- read.csv(file = "micro_chile.csv", sep = ";")
medianas_chile <- read.csv(file = "medianas_chile.csv", sep = ";")
grandes_chile <- read.csv(file = "grandes_chile.csv", sep = ";")
micro <- "Micro"
mediana <- "Mediana"
pequena <- "Pequena"
grande <- "Grande"
pequena_peru <- cbind(pequena_peru, Tamanio = pequena)
pequena_chile <- cbind(pequena_chile, Tamanio = pequena)
pequena_colombia <- cbind(pequena_colombia, Tamanio = pequena)
micro_chile <- cbind(micro_chile, Tamanio = micro)
micro_colombia <- cbind(micro_colombia,Tamanio = micro)
micro_peru <- cbind(micro_peru, Tamanio = micro)
medianas_chile <- cbind(medianas_chile, Tamanio = mediana)
medianas_colombia <- cbind(medianas_colombia, Tamanio = mediana)
medianas_peru <- cbind(medianas_peru, Tamanio = mediana)
grandes_chile <- cbind(grandes_chile, Tamanio = grande)
grandes_colombia <- cbind(grandes_colombia, Tamanio = grande)
grandes_peru <- cbind(grandes_peru, Tamanio = grande)
install.packages("dplyr")
library("dplyr")
pequena_peru <- rename(pequena_peru, porcentaje_mujeres = procentaje_mujeres)
micro_chile <- rename(micro_chile, porcentaje_mujeres = procentaje_muejeres)
medianas_chile <- rename(medianas_chile, porcentaje_mujeres = procentaje_mujeres)
medianas_peru <- rename(medianas_peru, porcentaje_mujeres = procentaje_muejeres)
grandes_chile <- rename(grandes_chile, porcentaje_mujeres = procentaje_mujeres)
grandes_colombia <- rename(grandes_colombia, porcentaje_mujeres = procentaje_mujeres)
grandes_peru <- rename(grandes_peru, porcentaje_mujeres = procentaje_muejeres)
Base_datos_empresas <- rbind(pequena_chile,pequena_colombia,pequena_peru,
micro_chile,micro_colombia,micro_peru,
medianas_chile,medianas_colombia,medianas_peru,
grandes_chile,grandes_colombia,grandes_peru)
Tipologia_base_de_datos <- function(Base_datos_empresas){
for (i in 1:length(Base_datos_empresas)) {
tipo <- typeof(Base_datos_empresas[i])
print(paste("La variable",i,"es de tipo",tipo))
}
}
Tipologia_base_de_datos(Base_datos_empresas)
Observaciones <- function(Base_datos_empresas){
#Se establecen las variables vacias que contendran la cantidad de observaciones de cada país
observacioneschile <- 0
observacionesperu <- 0
#[INICIA LOOP]
for (ob in 1:length(Base_datos_empresas$pais)) {
#Se establece la condicional para chile
if(Base_datos_empresas$pais[ob] == "chile"){
#Se aumenta la variable correspondiente
observacioneschile <- observacioneschile + 1
#Se establece la condicional para peru
}else if(Base_datos_empresas$pais[ob] == "peru"){
#Se aumenta la variable correspondiente
observacionesperu <- observacionesperu + 1
}
#[FINALIZA LOOP]
}
#Se imprime string con los resultados obtenidos
print(paste("Chile posee",observacioneschile,"observaciones, mientras que Perú posee",observacionesperu,"observaciones"))
}
Observaciones(Base_datos_empresas)
Base_datos_empresas$ingresos <- gsub("[,]",".",Base_datos_empresas$ingresos)
Base_datos_empresas$ingresos <- as.numeric(Base_datos_empresas$ingresos)
MayorIng <- function(Base_datos_empresas){
#Estableciendo las variables que almacenaran los montos de cada pais
IngChile <- 0
IngColombia <- 0
IngPeru <- 0
#Creando loop que sumara los montos de cada pais en su variable correspondiente
for (m in 1:nrow(Base_datos_empresas)) {
#[INICIA LOOP]
#Estableciendo condicion para almacenar en ingresos de chile
if(Base_datos_empresas[m,2] == "chile"){
IngChile <- IngChile + Base_datos_empresas[m,3]
#Estableciendo condicion para almacenar en ingresos colombia
}else if(Base_datos_empresas[m,2] == "colombia"){
IngColombia <- IngColombia + Base_datos_empresas[m,3]
#Estableciendo condicion para almacenar en ingresos peru
}else if(Base_datos_empresas[m,2] == "peru"){
IngPeru <- IngPeru + Base_datos_empresas[m,3]
}
#[FINALIZA LOOP]
}
#Definiendo por medio de funcion max el mayor monto de ingresos y almacenandolo en una variable
MontoMax <- max(IngPeru,IngColombia,IngChile)
#Estableciendo una serie de condicionales para el establecimiento del pais correspondiente al monto maximo encontrado
if(IngPeru == MontoMax){
PaisMax <- "Peru"
}else if(IngColombia == MontoMax){
PaisMax <- "Colombia"
}else if(IngChile == MontoMax){
PaisMax <- "Chile"
}
#Imprimiendo resultados con el nombre del pais con mayores ingresos y el monto correspondiente
print(paste("El pais con mayores ingreso es", PaisMax, "con montos totales de", MontoMax))
}
MayorIng(Base_datos_empresas)
Base_datos_empresas$tasa_interes <- gsub("[,]",".",Base_datos_empresas$tasa_interes)
Base_datos_empresas$tasa_interes <- as.numeric(Base_datos_empresas$tasa_interes)
nueva_tasa <- c()
for (i in 1:nrow(Base_datos_empresas)) {
#[INICIA LOOP]
#Estableciendo la condicional para chile
if(Base_datos_empresas[i,2] == "chile"){
#Agregando al vector el resultado del calculo
nueva_tasa <- c(nueva_tasa,(Base_datos_empresas[i,12] * 0.1))
#Estableciendo la condicional para peru
}else if(Base_datos_empresas[i,2] == "peru"){
#Agregando al vector el resultado del calculo
nueva_tasa <- c(nueva_tasa,(Base_datos_empresas[i,12] + 0.3))
#Estableciendo la condicional para colombia
}else if(Base_datos_empresas[i,2] == "colombia"){
#Agregando al vector el resultado del calculo
nueva_tasa <- c(nueva_tasa,(Base_datos_empresas[i,12] / 10))
}
#[FINALIZA LOOP]
}
Base_datos_empresas <- cbind(Base_datos_empresas, nueva_tasa = nueva_tasa)
Base_datos_empresas$exportaciones <- gsub("[,]",".",Base_datos_empresas$exportaciones)
Base_datos_empresas$exportaciones <- as.numeric(Base_datos_empresas$exportaciones)
Base_datos_empresas$exportaciones <- round(Base_datos_empresas$exportaciones,1)
for (r in 1:(length(Base_datos_empresas$exportaciones))) {
#[INICA LOOP]
#Se establece la primera condicion
if(Base_datos_empresas$exportaciones[r] > 2.1){
Base_datos_empresas$exportaciones[r] <- 1
#Se establece la segunda condicion
}else if(Base_datos_empresas$exportaciones[r] < 2.1){
Base_datos_empresas$exportaciones[r] <- 2
#Se establece la tercera condicion
}else if(Base_datos_empresas$exportaciones[r] == 2.1){
Base_datos_empresas$exportaciones[r] <- 3
}
#[FINALIZA LOOP]
}
##Cambiando las compas por puntos
Base_datos_empresas$importaciones <- gsub("[,]",".",Base_datos_empresas$importaciones)
##Transformando la variable a valores numericos
Base_datos_empresas$importaciones <- as.numeric(Base_datos_empresas$importaciones)
ImpChile <- 0
ImpColombia <- 0
ImpPeru <- 0
for (i in 1:nrow(Base_datos_empresas)) {
if(Base_datos_empresas[i,2] == "chile"){
ImpChile <- ImpChile + Base_datos_empresas[i,7]
}else if(Base_datos_empresas[i,2] == "colombia"){
ImpColombia <- ImpColombia + Base_datos_empresas[i,7]
}else if(Base_datos_empresas[i,2] == "peru"){
ImpPeru <- ImpPeru + Base_datos_empresas[i,7]
}
}
Import <- c(ImpChile,ImpColombia,ImpPeru)
Country <- c("Chile","Colombia","Peru")
barplot(height = Import, names.arg = Country, main = "Importaciones por pais", ylab = "Montos $MUSD", xlab = "Pais", col = c("blue","yellow","red"))
medianas_colombia <- read.csv(file = "medianas_colombia.csv", sep = ";")
setwd("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP")
grandes_chile <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/grandes_chile.csv")
View(grandes_chile)
grandes_colombia <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/grandes_colombia.csv")
View(grandes_colombia)
grandes_peru <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/grandes_peru.csv")
View(grandes_peru)
medianas_chile <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/medianas_chile.csv")
View(medianas_chile)
medianas_colombia <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/medianas_colombia.csv")
View(medianas_colombia)
medianas_peru <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/medianas_peru.csv")
View(medianas_peru)
micro_chile <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/micro_chile.csv")
View(micro_chile)
micro_colombia <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/micro_colombia.csv")
View(micro_colombia)
micro_peru <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/micro_peru.csv")
View(micro_peru)
pequena_chile <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/pequena_chile.csv")
View(pequena_chile)
pequena_colombia <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/pequena_colombia.csv")
View(pequena_colombia)
pequena_peru <- read.csv2("C:/Users/theca/OneDrive/Escritorio/Tarea2_FOR_LOOP/pequena_peru.csv")
View(pequena_peru)
## Se instalan paquetes para cargar la base de dato.
## Se cargan los archivos en "Import Dataset" con "From text (base).
install.packages('readr')
library('readr')
install.packages("csv")
library("csv")
## Se designan las variables indicadoras del atributo.
nivelCuatro <- "empresa grande"
nivelTres <- "empresa mediana"
nivelDos <- "empresa micro"
nivelUno <- "empresa pequeña"
## Se designa la variable tamanio en cada data.
grandes_peru <- cbind(grandes_peru, tamanio=nivelCuatro)
grandes_chile <- cbind(grandes_chile, tamanio=nivelCuatro)
grandes_colombia <- cbind(grandes_colombia, tamanio=nivelCuatro)
medianas_peru <- cbind(medianas_peru, tamanio=nivelTres)
medianas_chile <- cbind(medianas_chile, tamanio=nivelTres)
medianas_colombia <- cbind(medianas_colombia, tamanio=nivelTres)
pequena_peru <- cbind(pequena_peru, tamanio=nivelDos)
pequena_chile <- cbind(pequena_chile, tamanio=nivelDos)
pequena_colombia <- cbind(pequena_colombia, tamanio=nivelDos)
micro_peru <- cbind(micro_peru, tamanio=nivelUno)
micro_chile <- cbind(micro_chile, tamanio=nivelUno)
micro_colombia <- cbind(micro_colombia, tamanio=nivelUno)
pequena_peru <- rename(pequena_peru, procentaje_muejeres = procentaje_mujeres)
micro_chile <- rename(micro_chile, procentaje_muejeres = procentaje_muejeres)
medianas_chile <- rename(medianas_chile, procentaje_muejeres = procentaje_mujeres)
pequena_peru <- rename(pequena_peru, porcentaje_mujeres = procentaje_mujeres)
micro_chile <- rename(micro_chile, porcentaje_mujeres = procentaje_muejeres)
pequena_peru <- rename(pequena_peru, porcentaje_mujeres = procentaje_mujeres)
micro_chile <- rename(micro_chile, porcentaje_mujeres = procentaje_muejeres)
# No se pueden reunion las bases de datos por que no tiene el mismo nombre de una variable. Se cambia el nombre al cual se indica en las intruccines de la tarea oficial.
install.packages("dplyr")
library("dplyr")
pequena_peru <- rename(pequena_peru, porcentaje_mujeres = procentaje_mujeres)
micro_chile <- rename(micro_chile, porcentaje_mujeres = procentaje_muejeres)
medianas_chile <- rename(medianas_chile, porcentaje_mujeres = procentaje_mujeres)
medianas_peru <- rename(medianas_peru, porcentaje_mujeres = procentaje_muejeres)
grandes_chile <- rename(grandes_chile, porcentaje_mujeres = procentaje_mujeres)
grandes_colombia <- rename(grandes_colombia, porcentaje_mujeres = procentaje_mujeres)
grandes_peru <- rename(grandes_peru, porcentaje_mujeres = procentaje_muejeres)
## Se reúne la base de datos como un uno común, con un vector.
conjuntoDeBasesEnUno<- rbind(grandes_chile, grandes_colombia, grandes_peru, medianas_chile, medianas_colombia, medianas_peru, micro_chile, micro_colombia, micro_peru, pequena_chile, pequena_colombia, pequena_peru)
tipologiaDeBase <- function(conjuntoDeBasesEnUno){
for (tipologia in 1:length(conjuntoDeBasesEnUno)) {
## Se guarda la variable typeof para que de la respuesta correpondiente.
tipoDeDato <- typeof(conjuntoDeBasesEnUno[tipologia])
print(paste("La variable que se encuentra en la data de tipología",tipologia,"es de tipo de dato:",tipoDeDato))
}
}
## Respuesta: se prueba oficialmente.
tipologiaDeBase(conjuntoDeBasesEnUno)
## Se crea una función que mantenga el recorrido de la base de datos que es un vector.
obsTotales <- function(conjuntoDeBasesEnUno){
## Se establece la regla de ceros para que cambie los elementos.
contadorDePeru <- 0
contadorDeChile <- 0
for (obs in 1:(length(conjuntoDeBasesEnUno[["pais"]]))){
## Condición.
if((conjuntoDeBasesEnUno)[["pais"]][obs] == "peru"){
contadorDePeru <- contadorDePeru + 1
}else if((conjuntoDeBasesEnUno)[["pais"]][obs] == "chile"){
contadorDeChile <- contadorDeChile + 1
}
}
print(paste("Peru tiene:", contadorDePeru,"observaciones. Versus Chile que tiene:", contadorDeChile,"observaciones."))
}
## Respuesta: se prueba oficialmente.
obsTotales(conjuntoDeBasesEnUno)
## Se cambia la data a números.
conjuntoDeBasesEnUno[["ingresos"]] <- as.numeric(conjuntoDeBasesEnUno[["ingresos"]])
## Se crea una función que mantenga el recorrido de la base de datos que es un vector.
paisMaxIngreso <- function(conjuntoDeBasesEnUno){
## Se establece la regla de ceros para que cambie los elementos.
cPe <- 0
cCh <- 0
cCo <- 0
for (valores in 1:nrow(conjuntoDeBasesEnUno)){
## Se diseñan las condiciones igual que el ejercicio anterior. Se guardan los valores de la columna de los ingresos diferenciando el país. Con esto se busca diferenciar la posición del país e ingreso.
if(conjuntoDeBasesEnUno[valores,2] == "peru"){
## Se agrega la regla de agregar el contador de la columna 3, es decir el de ingresos.
cPe <- cPe + conjuntoDeBasesEnUno[valores,3]
}else if(conjuntoDeBasesEnUno[valores,2] == "chile"){
cCh <- cCh + conjuntoDeBasesEnUno[valores,3]
}else if(conjuntoDeBasesEnUno[valores,2] == "colombia"){
cCo <- cCo + conjuntoDeBasesEnUno[valores,3]
}
}
## Se crea vector para determinar el orden como posición específicamente respecto a los países.
n <- c(cPe,cCh,cCo)
## Se crea una función LOOP la cual guarda el vector de países.
ox <- function(n){
## Se agrega una fórmula de prueba para que reconozca la lógica.
m <- ((n[1]+n[2]+n[3]) / length(n))
## Se establece el for para que recorra el vector y se pueda orden con el LOOP sin tener un orden especifico el país pero si el ingreso de aquel.
for (a in 1:length(n)) {
for (b in 1:(length(n)-1)) {
if(n[b] > n[b+1]){
tmp <- n[b]
n[b] <- n[b+1]
n[b+1] <- tmp
}
}
}
}
## Se crea un vector que calcula el máximo del vector anteriormente creado de los países.
maximo <- max(n)
## Se diseñan las condiciones para que se designe el país correspondiente en el cálculo del LOOP y el vector respecto a el ingreso.
if( cPe == maximo){
pm <- "Peru"
}else if(cCh == maximo){
pm <- "Chile"
}else if(cCo == maximo){
pm <- "Colombia"
}
print(paste("Conclusión:", pm,"es el país con mayor ingresos de explotación de la muestra con:", n[3]))
}
## Respuesta: se prueba oficialmente.
paisMaxIngreso(conjuntoDeBasesEnUno)
## Se cambia la data a números.
conjuntoDeBasesEnUno[["tasa_interes"]] <- as.numeric(conjuntoDeBasesEnUno[["tasa_interes"]])
## Se crea un vector que almacene los cálculos y datos de la nueva columna
nt <- c()
## Se crea un for que recorra la columna.
for (vti in 1:nrow(conjuntoDeBasesEnUno)) {
## Diseño condición: se designa la posición de la columna que identifica el país.
if(conjuntoDeBasesEnUno[vti,"pais"] == "peru"){
## Se guarda el cálculo de la variable con el vector.
nt <- c(nt, conjuntoDeBasesEnUno[[vti,"tasa_interes"]]+0.3)
}else if(conjuntoDeBasesEnUno[vti,"pais"] == "chile"){
nt <- c(nt, conjuntoDeBasesEnUno[[vti,"tasa_interes"]]*0.1)
}else if(conjuntoDeBasesEnUno[vti,"pais"] == "colombia"){
nt <- c(nt, conjuntoDeBasesEnUno[[vti,"tasa_interes"]]/10)
}
}
## Respuesta: se prueba oficialmente.
## Se crea el reconocimiento del vector con la tabla.
conjuntoDeBasesEnUno <- cbind(conjuntoDeBasesEnUno, nt = nt)
## Se cambia la data a números.
conjuntoDeBasesEnUno[["exportaciones"]] <- as.numeric(conjuntoDeBasesEnUno[["exportaciones"]])
## Se le señalan a los datos del data que debe redondear a la unidad.
conjuntoDeBasesEnUno[["exportaciones"]] <- round(conjuntoDeBasesEnUno[["exportaciones"]],1)
## Se establecen las variables que reemplazaran el redondeo de datos.
a <- 1
b <- 2
c <- 3
## Se crea un for que recorra la columna del data.
for (condicion in 1:(length(conjuntoDeBasesEnUno[["exportaciones"]]))) {
## Se establece la condición de la data.
if(conjuntoDeBasesEnUno[["exportaciones"]][condicion] == 2.1){
## se guarda la variable que reemplaza en la condición.
conjuntoDeBasesEnUno[["exportaciones"]][condicion] <- c
}else if(conjuntoDeBasesEnUno[["exportaciones"]][condicion] < 2.1){
conjuntoDeBasesEnUno[["exportaciones"]][condicion] <- b
}else if(conjuntoDeBasesEnUno[["exportaciones"]][condicion] > 2.1){
conjuntoDeBasesEnUno[["exportaciones"]][condicion] <- a
}
}
## Se cambia la data a números.
conjuntoDeBasesEnUno[["endeudamiento"]] <- as.numeric(conjuntoDeBasesEnUno[["endeudamiento"]])
## Se definen las variables nuevas del LOOP.
ePe <- 0
eCh <- 0
eCo <- 0
## Se crea un for que recorra la columna de endeudamiento.
for (en in 1:nrow(conjuntoDeBasesEnUno)){
## Diseño condición del país en su posición como país.
if(conjuntoDeBasesEnUno[en,2] == "peru"){
## Almacenamiento de la variable en la posición endeudamiento.
ePe <- ePe + conjuntoDeBasesEnUno[en,8]
}else if(conjuntoDeBasesEnUno[en,2] == "chile"){
eCh <- eCh + conjuntoDeBasesEnUno[en,8]
}else if(conjuntoDeBasesEnUno[en,2] == "colombia"){
eCo <- eCo + conjuntoDeBasesEnUno[en,8]
}
}
## Se crean 2 vectores que almacenen las variables anteriormente definidas.
endeudamiento <- c(ePe, eCh, eCo)
pais <- c("peru","chile","colombia")
## Se construye el vector que diseña el grafico.
barplot(names.arg = pais, height = endeudamiento, main = "Nivel de endeudamiento de algunos paises latinoamericanos", sub = "Paises: Peru, Chile y Colombia", xlab = "Pais", ylab = "Nivel de endeudamiento")
View(conjuntoDeBasesEnUno)
